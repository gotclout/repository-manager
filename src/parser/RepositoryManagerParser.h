/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/stbadmin/repository-manager/src/parser/RepositoryManager.g
 *     -                            On : 2016-01-20 16:04:35
 *     -                for the parser : RepositoryManagerParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
RepositoryManagerParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pRepositoryManagerParser, which is returned from a call to RepositoryManagerParserNew().
 *
 * The methods in pRepositoryManagerParser are  as follows:
 *
 *  - 
 RepositoryManagerParser_credential_return
      pRepositoryManagerParser->credential(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_public_key_return
      pRepositoryManagerParser->public_key(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_signature_return
      pRepositoryManagerParser->signature(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_validity_return
      pRepositoryManagerParser->validity(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_time_tuple_return
      pRepositoryManagerParser->time_tuple(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_certificate_return
      pRepositoryManagerParser->certificate(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_clause_return
      pRepositoryManagerParser->clause(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_literal_return
      pRepositoryManagerParser->literal(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_predicate_return
      pRepositoryManagerParser->predicate(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_challenge_return
      pRepositoryManagerParser->challenge(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_response_return
      pRepositoryManagerParser->response(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_request_return
      pRepositoryManagerParser->request(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_op_return
      pRepositoryManagerParser->op(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_reply_return
      pRepositoryManagerParser->reply(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_result_return
      pRepositoryManagerParser->result(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_text_return
      pRepositoryManagerParser->text(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_base64_return
      pRepositoryManagerParser->base64(pRepositoryManagerParser)
 *  - 
 RepositoryManagerParser_num_return
      pRepositoryManagerParser->num(pRepositoryManagerParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_RepositoryManagerParser_H
#define _RepositoryManagerParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct RepositoryManagerParser_Ctx_struct RepositoryManagerParser, * pRepositoryManagerParser;






#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct RepositoryManagerParser_credential_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_credential_return;



typedef struct RepositoryManagerParser_public_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_public_key_return;



typedef struct RepositoryManagerParser_signature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_signature_return;



typedef struct RepositoryManagerParser_validity_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_validity_return;



typedef struct RepositoryManagerParser_time_tuple_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_time_tuple_return;



typedef struct RepositoryManagerParser_certificate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_certificate_return;



typedef struct RepositoryManagerParser_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_clause_return;



typedef struct RepositoryManagerParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_literal_return;



typedef struct RepositoryManagerParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_predicate_return;



typedef struct RepositoryManagerParser_challenge_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_challenge_return;



typedef struct RepositoryManagerParser_response_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_response_return;



typedef struct RepositoryManagerParser_request_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_request_return;



typedef struct RepositoryManagerParser_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_op_return;



typedef struct RepositoryManagerParser_reply_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_reply_return;



typedef struct RepositoryManagerParser_result_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_result_return;



typedef struct RepositoryManagerParser_text_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_text_return;



typedef struct RepositoryManagerParser_base64_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_base64_return;



typedef struct RepositoryManagerParser_num_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    RepositoryManagerParser_num_return;




/** Context tracking structure for 
RepositoryManagerParser

 */
struct RepositoryManagerParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     RepositoryManagerParser_credential_return
     (*credential)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_public_key_return
     (*public_key)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_signature_return
     (*signature)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_validity_return
     (*validity)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_time_tuple_return
     (*time_tuple)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_certificate_return
     (*certificate)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_clause_return
     (*clause)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_literal_return
     (*literal)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_predicate_return
     (*predicate)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_challenge_return
     (*challenge)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_response_return
     (*response)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_request_return
     (*request)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_op_return
     (*op)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_reply_return
     (*reply)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_result_return
     (*result)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_text_return
     (*text)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_base64_return
     (*base64)	(struct RepositoryManagerParser_Ctx_struct * ctx);

     RepositoryManagerParser_num_return
     (*num)	(struct RepositoryManagerParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct RepositoryManagerParser_Ctx_struct * ctx);
    void	    (*free)   (struct RepositoryManagerParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pRepositoryManagerParser RepositoryManagerParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pRepositoryManagerParser RepositoryManagerParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__39      39
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define CERT      4
#define CERT_END      5
#define CERT_HEADER      6
#define CHALLENGE_END      7
#define CHALLENGE_HEADER      8
#define CLAUSE      9
#define CREDENTIAL      10
#define CREDENTIAL_END      11
#define CREDENTIAL_HEADER      12
#define END      13
#define END_CERT      14
#define END_SIG      15
#define NOT_AFTER      16
#define NOT_BEFORE      17
#define NUM      18
#define PK      19
#define PUBLIC_KEY_END      20
#define PUBLIC_KEY_HEADER      21
#define REPLY_END      22
#define REPLY_HEADER      23
#define REQUEST_END      24
#define REQUEST_HEADER      25
#define RESPONSE_END      26
#define RESPONSE_HEADER      27
#define SIG      28
#define SIGNATURE_END      29
#define SIGNATURE_HEADER      30
#define START_TIME      31
#define STOP_TIME      32
#define TEXT      33
#define VALIDITY      34
#define VALIDITY_END      35
#define VALIDITY_HEADER      36
#define VALUE      37
#define WS      38
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for RepositoryManagerParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
